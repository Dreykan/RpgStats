@page "/allGames"
@using RpgStats.BizLogic
@using RpgStats.BlazorServer.Model
@using RpgStats.Dto
@inject IHttpClientFactory HttpClientFactory

<MudGrid>
    @if (_games == null)
    {
        <MudItem md="12" sm="12">
            <MudProgressCircular Color="Color.Default" Indeterminate="true" Style="margin-top: 2em"/>
        </MudItem>
    }
    else
    {
        <MudItem md="12" sm="12">
            <MudButton Href="/newGame" Variant="Variant.Filled" Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.OpenInNew" FullWidth="true" Size="Size.Large">Neues Spiel
            </MudButton>
        </MudItem>

        @foreach (var game in _games)
        {
            <div class="card-group">
                <MudCard Class="m-2" Style="min-width: 24rem; max-width: 24rem; min-height: 500px;" Elevation="15">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h4" Align="Align.Center">@game.Name</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudLink Href="@($"/gameDetail/{game.Id}")">
                        @if (game.Picture == null)
                        {
                            <MudCardMedia Image="images/placeholder-1.png" Title="placeholder-3"/>
                        }
                        else
                        {
                            <MudImage Src="@TurnByteArrayToImage(game)" ObjectFit="ObjectFit.Fill"
                                      Alt="Picture of the Game" Elevation="2" Fluid="true"
                                      Class="rounded-3 mx-auto d-block m-3" Style="max-width: 24rem;"/>
                        }
                    </MudLink>
                    <MudCardContent>
                        <MudText Typo="Typo.h5">Platform:</MudText>
                        <MudText Typo="Typo.body1">@CreatePlatformString(game)</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Href="@($"/gameDetail/{game.Id}")" Variant="Variant.Filled" Color="Color.Primary"
                                   FullWidth="true" Style="margin: auto;">Details
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </div>
        }
    }
</MudGrid>

@code {
    private HttpClient HttpClient => HttpClientFactory.CreateClient("RpgStatsApi");
    private List<GameDetailDto>? _games;

    protected override async Task OnInitializedAsync()
    {
        await GetGames();
    }

    private async Task GetGames()
    {
        var response = await HttpClient.GetFromJsonAsync<RpgStatsResponse<List<GameDetailDto>>>("api/Game/GetGamesDetail");
        _games = response?.Data?.OrderBy(x => x.Name).ToList();
    }

    private static string TurnByteArrayToImage(GameDetailDto game)
    {
        var imageSrc = string.Empty;
        if (game.Picture != null)
        {
            imageSrc = ImageService.ConvertByteArrayToImage(game.Picture);
        }

        return imageSrc;
    }

    private static string CreatePlatformString(GameDetailDto game)
    {
        var platformString = string.Empty;
        if (game.PlatformWithoutFkObjectsDtos == null || !game.PlatformWithoutFkObjectsDtos.Any()) return platformString;
        platformString = game.PlatformWithoutFkObjectsDtos.OrderBy(x => x.Name).ToList().Aggregate(platformString, (current, gamePlatformWithoutFkObjectsDto) => current + gamePlatformWithoutFkObjectsDto.Name + ", ");
        platformString = platformString.Remove(platformString.Length - 2, 1);

        return platformString;
    }

}