@page "/allGames"
@using RpgStats.Services.Abstractions
@using RpgStats.Dto
@using RpgStats.BizLogic
@inject IGameService GameService

<MudGrid>
    @if (_games == null)
    {
        <MudItem md="12" sm="12">
            <MudProgressCircular Color="Color.Default" Indeterminate="true" Style="margin-top: 2em"/>
        </MudItem>
    }
    else
    {
        <MudItem md="12" sm="12">
            <MudButton Href="/newGame" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.OpenInNew" FullWidth="true" Size="Size.Large">Neues Spiel</MudButton>
        </MudItem>

        @foreach (var game in _games)
        {
            <div class="card-group">
                <MudCard Class="m-2" Style="min-width: 24rem; max-width: 24rem; min-height: 500px;" Elevation="15">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h4" Align="Align.Center">@game.Name</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    @if (game.Picture == null)
                    {
                        <MudText Typo="Typo.body2" Align="Align.Center">No Picture...</MudText>
                    }
                    else
                    {
                        <MudImage Src="@TurnByteArrayToImage(game)" ObjectFit="ObjectFit.Fill" Alt="Picture of the Game" Elevation="2" Fluid="true" Class="rounded-3 mx-auto d-block m-3" Style="max-width: 24rem;" />
                    }
                    <MudCardContent>
                        <MudText Typo="Typo.h5">Platform:</MudText>
                        <MudText Typo="Typo.body1">@CreatePlatformString(game)</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Href="@($"/gameDetail/{game.Id}")" Variant="Variant.Filled" Color="Color.Primary" Style="margin: auto;">Details</MudButton>
                    </MudCardActions>
                </MudCard>
            </div>

        }
    }
</MudGrid>

@code {

    private List<GameDetailDto>? _games;

    protected override async Task OnInitializedAsync()
    {
        await GetGames();
    }

    private async Task GetGames()
    {
        _games = await GameService.GetAllGameDetailDtosAsync();
        _games = _games.OrderBy(x => x.Name).ToList();
    }

    private string TurnByteArrayToImage(GameDetailDto game)
    {
        var imageSrc = string.Empty;
        if (game.Picture != null)
        {
            imageSrc = ImageService.ConvertByteArrayToImage(game.Picture);
        }

        return imageSrc;
    }

    private string CreatePlatformString(GameDetailDto game)
    {
        string platformString = string.Empty;
        if (game.PlatformWithoutFkObjectsDtos != null && game.PlatformWithoutFkObjectsDtos.Any())
        {
            foreach (var gamePlatformWithoutFkObjectsDto in game.PlatformWithoutFkObjectsDtos)
            {
                platformString = platformString + gamePlatformWithoutFkObjectsDto.Name + ", ";
            }
            platformString = platformString.Remove(platformString.Length - 2, 1);
        }

        return platformString;
    }
}