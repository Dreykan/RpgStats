@page "/newGame"
@using RpgStats.Services.Abstractions
@using RpgStats.Dto
@using SkiaSharp
@using RpgStats.BizLogic
@inject IGameService GameService
@inject IPlatformService PlatformService
@inject IPlatformGameService PlatformGameService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<MudText Typo="Typo.h4" Align="Align.Center">Erstelle ein neues Spiel</MudText>

<MudGrid Class="mt-5">
    <MudItem xs="12" sm="12">
        <MudPaper Class="pa-0">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField Clearable="true" T="string" Label="Name" Required="true" RequiredError="A name for this game is required" @bind-Value="@gameForCreationDto.Name"/>
                <MudSelect T="string" Required="true" Label="Platforms" MultiSelection="true" @bind-Value="value" @bind-SelectedValues="selectedPlatforms" Clearable="true">
                    @foreach (var platformDto in platformDtos)
                    {
                        <MudSelectItem T="string" Value="@platformDto.Name">@platformDto.Name</MudSelectItem>
                    }
                </MudSelect>
                <MudGrid>
                    <MudItem lg="6" md="6" xs="12" sm="12">
                        <MudFileUpload T="IBrowserFile" Accept=".jpg,.png" FilesChanged="UploadFiles" MaximumFileCount="1">
                            <ButtonTemplate>
                                <MudButton HtmlTag="label"
                                           Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.Image"
                                           for="@context">
                                    Upload Image (only .jpg and png)
                                </MudButton>
                            </ButtonTemplate>
                        </MudFileUpload>
                        <MudToolBar DisableGutters="true" Class="gap-4">
                            <MudText>@files.Count.ToString() Bilder zwischengespeichert</MudText>
                            <MudButton OnClick="ClearImages" Disabled="@(!files.Any())" Color="Color.Error" Variant="Variant.Filled">Clear</MudButton>
                        </MudToolBar>
                    </MudItem>
                    <MudItem lg="1" md="3" xs="12" sm="12">
                        <MudImage Src="@TurnByteArrayToImage(imageBytes)" ObjectFit="ObjectFit.Fill" Alt="Picture of the Game" Elevation="0" Fluid="true" Class="rounded-3 mx-auto d-block m-3" Style="max-width: 12rem;"/>
                    </MudItem>
                </MudGrid>
                
                
                <div class="align-content-center mt-4">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Disabled="@(!success)" Class="m-auto" OnClick="@(async () => await Create())">Erstellen</MudButton>
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private GameForCreationDto gameForCreationDto = new();
    private List<PlatformDto> platformDtos = new();
    private string value = "Nothing selected.";
    private IEnumerable<string> selectedPlatforms { get; set; } = new HashSet<string>() {  };
    MudForm form;
    bool success;
    string[] errors = { };
    IList<IBrowserFile> files = new List<IBrowserFile>();
    Byte[] imageBytes = Array.Empty<byte>();

    protected override async Task OnInitializedAsync()
    {
        await GetPlatforms();
    }

    private async Task Create()
    {
        await GameService.CreateGameAsync(gameForCreationDto);
        long gameId = await GetIdOfCreatedGame(gameForCreationDto.Name);

        List<long> selectedPlatformIds = new();
        foreach (var selectedPlatform in selectedPlatforms)
        {
            long id = await GetIdOfPlatform(selectedPlatform);
            selectedPlatformIds.Add(id);
        }

        foreach (var selectedPlatformId in selectedPlatformIds)
        {
            await PlatformGameService.CreatePlatformGameAsync(selectedPlatformId, gameId);
        }

        gameForCreationDto.Name = "";
        files.Clear();

        await ShowSuccessDialog();

        NavigationManager.NavigateTo("/allGames");
    }

    private async Task ShowSuccessDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Das Spiel wurde erfolgreich erstellt.");
        parameters.Add("ButtonText", "OK");
        parameters.Add("Color", Color.Success);

        var options = new DialogOptions()
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Small
            };

        var dialog = await DialogService.ShowAsync<SuccessDialog>("Erfolg", parameters, options);
        await dialog.Result;
    }

    private async Task GetPlatforms()
    {
        platformDtos = await PlatformService.GetAllPlatformsAsync();
    }

    private async Task<long> GetIdOfCreatedGame(string gameName)
    {
        var gameList = await GameService.GetAllGamesByNameAsync(gameName);
        var game = gameList.FirstOrDefault();
        long id = game.Id;
        return id;
    }

    private async Task<long> GetIdOfPlatform(string platformName)
    {
        var platformList = await PlatformService.GetAllPlatformDetailDtosByNameAsync(platformName);
        var platform = platformList.FirstOrDefault();
        long id = platform.Id;
        return id;
    }

    private async void UploadFiles(IBrowserFile file)
    {
        if (files.Count <= 0)
        {
            files.Add(file);
        }
        else
        {
            ShowErrorMessage("You can't upload more than one image for a game.");
        }
        
        using MemoryStream ms = new MemoryStream();
        var stream = file.OpenReadStream(4096000L);
        await stream.CopyToAsync(ms);
        imageBytes = ms.ToArray();

        var resizedImageBytes = ImageService.ResizeImageTo512(imageBytes, SKFilterQuality.High);

        gameForCreationDto.Picture = resizedImageBytes;
    }

    private string TurnByteArrayToImage(Byte[] imageBytes)
    {
        var imageSrc = string.Empty;
        imageSrc = ImageService.ConvertByteArrayToImage(imageBytes);

        return imageSrc;
    }

    private async void ShowErrorMessage(string text)
    {
        bool? result = await DialogService.ShowMessageBox("Error", text, "OK");
    }

    private void ClearImages()
    {
        gameForCreationDto.Picture = null;
        imageBytes = Array.Empty<byte>();
        files.Clear();
    }
}
