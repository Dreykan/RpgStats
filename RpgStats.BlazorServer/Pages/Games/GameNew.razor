@page "/newGame"
@using RpgStats.BizLogic
@using RpgStats.Dto
@using SkiaSharp
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory

<MudText Typo="Typo.h4" Align="Align.Center">Erstelle ein neues Spiel</MudText>

<MudGrid Class="mt-5">
    <MudItem xs="12">
        <MudPaper Class="pa-0">
            <MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors">
                <MudTextField Clearable="true" T="string" Label="Name" Required="true"
                              RequiredError="Ein Name ist schon erforderlich..." @bind-Value="_gameForCreationDto.Name"
                              TextChanged="OnNameChanged" Immediate="true"/>
                <MudSelect T="string" Required="true" Label="Platforms" MultiSelection="true" @bind-Value="_value"
                           @bind-SelectedValues="SelectedPlatforms" Clearable="true">
                    @if (_platformDtos != null)
                    {
                        foreach (var platformDto in _platformDtos.OrderBy(x => x.Name).ToList())
                        {
                            <MudSelectItem T="string" Value="@platformDto.Name">@platformDto.Name</MudSelectItem>
                        }
                    }
                </MudSelect>
                <MudGrid>
                    <MudItem lg="6" md="6" xs="12" sm="12">
                        <MudFileUpload T="IBrowserFile" Accept=".jpg,.png" FilesChanged="UploadFiles"
                                       MaximumFileCount="1">
                            <ButtonTemplate>
                                <MudButton HtmlTag="label"
                                           Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.Image"
                                           for="@context">
                                    Upload Image (only .jpg and png)
                                </MudButton>
                            </ButtonTemplate>
                        </MudFileUpload>
                        <MudToolBar DisableGutters="true" Class="gap-4">
                            <MudText>@_files.Count.ToString() Bilder zwischengespeichert</MudText>
                            <MudButton OnClick="ClearImages" Disabled="@(!_files.Any())" Color="Color.Error"
                                       Variant="Variant.Filled">Clear
                            </MudButton>
                        </MudToolBar>
                    </MudItem>
                    <MudItem lg="1" md="3" xs="12" sm="12">
                        <MudImage Src="@TurnByteArrayToImage(_imageBytes)" ObjectFit="ObjectFit.Fill"
                                  Alt="Picture of the Game" Elevation="0" Fluid="true"
                                  Class="rounded-3 mx-auto d-block m-3" Style="max-width: 12rem;"/>
                    </MudItem>
                </MudGrid>
                <div class="align-content-center mt-4">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Disabled="@(!_success)"
                               Class="m-auto" OnClick="@(async () => await Create())">Erstellen
                    </MudButton>
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@* ReSharper disable NotAccessedField.Local *@

@code {
    private HttpClient HttpClient => HttpClientFactory.CreateClient("RpgStatsApi");
    private readonly GameForCreationDto _gameForCreationDto = new();
    private List<PlatformDto>? _platformDtos = new();
    private string _value = "Nothing selected.";
    private IEnumerable<string> SelectedPlatforms { get; set; } = new HashSet<string>();
    private MudForm? _form;
    private bool _success;
    private string[] _errors = { };
    private readonly IList<IBrowserFile> _files = new List<IBrowserFile>();
    private byte[] _imageBytes = Array.Empty<byte>();

    protected override async Task OnInitializedAsync()
    {
        await GetPlatforms();
    }

    private async Task Create()
    {
        var response = await HttpClient.PostAsJsonAsync("api/Game/CreateGame", _gameForCreationDto);
        response.EnsureSuccessStatusCode();

        var gameId = await GetIdOfCreatedGame(_gameForCreationDto.Name);

        List<long> selectedPlatformIds = new();
        foreach (var selectedPlatform in SelectedPlatforms)
        {
            var id = await GetIdOfPlatform(selectedPlatform);
            selectedPlatformIds.Add(id);
        }

        foreach (var selectedPlatformId in selectedPlatformIds)
        {
            await HttpClient.PostAsJsonAsync($"api/PlatformGame/CreatePlatformGame/{selectedPlatformId}/{gameId}", "");
        }

        _gameForCreationDto.Name = "";
        _files.Clear();

        await ShowSuccessDialog();

        NavigationManager.NavigateTo("/allGames");
    }

    private async Task ShowSuccessDialog()
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Das Spiel wurde erfolgreich erstellt." },
            { "ButtonText", "OK" },
            { "Color", Color.Success }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small
        };

        var dialog = await DialogService.ShowAsync<MessageDialog>("Erfolg", parameters, options);
        await dialog.Result;
    }

    private async Task GetPlatforms()
    {
        _platformDtos = await HttpClient.GetFromJsonAsync<List<PlatformDto>>("api/Platform/GetPlatforms");
    }

    private async Task<long> GetIdOfCreatedGame(string gameName)
    {
        var gameList = await HttpClient.GetFromJsonAsync<List<GameDto>>($"api/Game/GetGamesByName/{gameName}");
        var game = gameList?.FirstOrDefault();
        var id = game?.Id ?? 0;
        return id;
    }

    private async Task<long> GetIdOfPlatform(string platformName)
    {
        var platformList = await HttpClient.GetFromJsonAsync<List<PlatformDetailDto>>($"api/Platform/GetPlatformsDetailByName/{platformName}");
        var platform = platformList?.FirstOrDefault();
        var id = platform?.Id ?? 0;
        return id;
    }

    private async Task UploadFiles(IBrowserFile? file)
    {
        if (_files.Count <= 0)
        {
            if (file != null) _files.Add(file);
        }
        else
        {
            await ShowErrorMessage("You can't upload more than one image for a game.");
        }

        using var ms = new MemoryStream();
        var stream = file?.OpenReadStream(4096000L);
        if (stream != null) await stream.CopyToAsync(ms);
        _imageBytes = ms.ToArray();

        var resizedImageBytes = ImageService.ResizeImageTo512(_imageBytes, SKFilterQuality.High);

        _gameForCreationDto.Picture = resizedImageBytes;
    }

    private static string TurnByteArrayToImage(byte[] imageBytes)
    {
        return ImageService.ConvertByteArrayToImage(imageBytes);
    }

    private async Task ShowErrorMessage(string text)
    {
        await DialogService.ShowMessageBox("Error", text);
    }

    private void ClearImages()
    {
        _gameForCreationDto.Picture = null;
        _imageBytes = Array.Empty<byte>();
        _files.Clear();
    }

    private void OnNameChanged(string value)
    {
        if (SelectedPlatforms.Any())
        {
            _success = !string.IsNullOrWhiteSpace(value);
        }
    }

}

@* ReSharper restore NotAccessedField.Local *@
