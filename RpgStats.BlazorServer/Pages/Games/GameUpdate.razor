@page "/updateGame/{Id:int}"
@using RpgStats.Services.Abstractions
@using RpgStats.Dto
@using SkiaSharp
@using RpgStats.BizLogic
@inject NavigationManager NavigationManager
@inject IGameService GameService
@inject IPlatformService PlatformService
@inject IPlatformGameService PlatformGameService
@inject IDialogService DialogService

@if (_game == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" Style="margin-top: 2em" />
}
else
{
    <MudText Typo="Typo.h4" Align="Align.Center">Update das Spiel @_game.Name</MudText>

    <MudGrid Class="mt-5">
        <MudItem xs="12" sm="12">
            <MudPaper Class="pa-4">
                <MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors">
                    <MudTextField Clearable="true" T="string" Label="Name" Required="true" RequiredError="A name for this game is required" @bind-Value="@_gameForUpdateDto.Name" TextChanged="OnNameChanged" Immediate="true" />
                    <MudSelect T="string" Required="true" Label="Platforms" MultiSelection="true" @bind-Value="_value" @bind-SelectedValues="SelectedPlatforms" Clearable="true">
                        @foreach (var platformDto in _platformDtos.OrderBy(x => x.Name).ToList())
                        {
                            <MudSelectItem T="string" Value="@platformDto.Name">@platformDto.Name</MudSelectItem>
                        }
                    </MudSelect>
                    <MudGrid>
                        <MudItem lg="6" md="6" xs="12" sm="12">
                            <MudFileUpload T="IBrowserFile" Accept=".jpg,.png" FilesChanged="UploadFiles" MaximumFileCount="1">
                                <ButtonTemplate>
                                    <MudButton HtmlTag="label"
                                               Variant="Variant.Filled"
                                               Color="Color.Primary"
                                               StartIcon="@Icons.Material.Filled.Image"
                                               for="@context">
                                        Upload Image (only .jpg and png)
                                    </MudButton>
                                </ButtonTemplate>
                            </MudFileUpload>
                            <MudToolBar DisableGutters="true" Class="gap-4">
                                <MudText>@_files.Count.ToString() Bilder zwischengespeichert</MudText>
                                <MudButton OnClick="ClearImages" Disabled="@(!_files.Any())" Color="Color.Error" Variant="Variant.Filled">Clear</MudButton>
                            </MudToolBar>
                        </MudItem>
                        <MudItem lg="1" md="3" xs="12" sm="12">
                            <MudImage Src="@TurnByteArrayToImage(_imageBytes)" ObjectFit="ObjectFit.Fill" Alt="Picture of the Game" Elevation="0" Fluid="true" Class="rounded-3 mx-auto d-block m-3" Style="max-width: 12rem;"/>
                        </MudItem>
                    </MudGrid>
                    <div class="align-content-center mt-4">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Disabled="@(!_success)" Class="m-auto" OnClick="@(async () => await Update())">Update</MudButton>
                    </div>
                </MudForm>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

@* ReSharper disable NotAccessedField.Local *@
@code {
    private GameDetailDto? _game;
    private readonly GameForUpdateDto _gameForUpdateDto = new();
    private List<PlatformDto> _platformDtos = new();
    private IEnumerable<string?> SelectedPlatforms { get; set; } = new HashSet<string>();
    private readonly IList<IBrowserFile> _files = new List<IBrowserFile>();
    private string _value = "Nothing selected.";
    private MudForm? _form;
    private bool _success;
    private string[] _errors = { };
    private byte[] _imageBytes = Array.Empty<byte>();

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetGame();
        await GetPlatforms();
        PrefillForm();
    }

    private async Task GetGame()
    {
        _game = await GameService.GetGameDetailDtoByIdAsync(Id);
    }

    private async Task Update()
    {
        if (_files.Count == 0)
        {
            _gameForUpdateDto.Picture = _game?.Picture;
        }

        await GameService.UpdateGameAsync(Id, _gameForUpdateDto);

        await PlatformGameService.DeletePlatformGameByGameIdAsync(Id);

        List<long> selectPlatformIds = new();
        foreach (var platformName in SelectedPlatforms)
        {
            if (string.IsNullOrEmpty(platformName))
			{
				continue;
			}
            long id = await GetIdOfPlatform(platformName);
            selectPlatformIds.Add(id);
        }

        foreach (var platformId in selectPlatformIds)
        {
            await PlatformGameService.CreatePlatformGameAsync(platformId, Id);
        }

        _gameForUpdateDto.Name = "";
        _files.Clear();
        SelectedPlatforms = new HashSet<string>();

        await ShowSuccessDialog();

        NavigationManager.NavigateTo($"/gameDetail/{Id}");
    }

    private async Task ShowSuccessDialog()
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Das Spiel wurde erfolgreich geändert." },
            { "ButtonText", "OK" },
            { "Color", Color.Success }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small
        };

        var dialog = await DialogService.ShowAsync<MessageDialog>("Erfolg", parameters, options);
        await dialog.Result;
    }

    private async Task GetPlatforms()
    {
        _platformDtos = await PlatformService.GetAllPlatformsAsync();
    }

    private void PrefillForm()
    {
        _gameForUpdateDto.Name = _game?.Name;

        if (_game?.PlatformWithoutFkObjectsDtos != null)
            foreach (var platform in _game.PlatformWithoutFkObjectsDtos.OrderBy(x => x.Name).ToList())
            {
                SelectedPlatforms = SelectedPlatforms.Append(platform.Name);
            }

        if (_game?.Picture != null)
        {
            _imageBytes = _game.Picture;
        }
    }

    private async Task<long> GetIdOfPlatform(string platformName)
    {
        var platformList = await PlatformService.GetAllPlatformDetailDtosByNameAsync(platformName);
        var platform = platformList.FirstOrDefault();
        long id = platform?.Id ?? 0;
        return id;
    }

    private async void UploadFiles(IBrowserFile? file)
    {
        if (_files.Count <= 0)
        {
            if (file != null) _files.Add(file);
        }
        else
        {
            if (file != null) _files[0] = file;
        }

        using var ms = new MemoryStream();
        var stream = file?.OpenReadStream(4096000L);
        if (stream != null) await stream.CopyToAsync(ms);
        _imageBytes = ms.ToArray();

        var resizedImageBytes = ImageService.ResizeImageTo512(_imageBytes, SKFilterQuality.High);

        _gameForUpdateDto.Picture = resizedImageBytes;
    }

    private static string TurnByteArrayToImage(byte[] imageBytes)
    {
        var imageSrc = ImageService.ConvertByteArrayToImage(imageBytes);

        return imageSrc;
    }

    private void ClearImages()
    {
        _gameForUpdateDto.Picture = null;
        _imageBytes = Array.Empty<byte>();
        _files.Clear();
    }

    private void OnNameChanged(string value)
	{
        if (SelectedPlatforms.Any())
		{
			_success = !string.IsNullOrWhiteSpace(value);
		}
	}
}
@* ReSharper restore NotAccessedField.Local *@
