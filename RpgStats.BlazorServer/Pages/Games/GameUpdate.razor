@page "/updateGame/{Id:int}"
@using RpgStats.BizLogic
@using RpgStats.BlazorServer.Model
@using RpgStats.Dto
@using SkiaSharp
@inject IDialogService DialogService
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JsRuntime

@if (_game == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" Style="margin-top: 2em"/>
}
else
{
    <MudText Typo="Typo.h4" Align="Align.Center">Update das Spiel @_game.Name</MudText>

    <MudGrid Class="mt-5">
        <MudItem xs="12" sm="12">
            <MudPaper Class="pa-4">
                <MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors">
                    <MudTextField Clearable="true" T="string" Label="Name" Required="true"
                                  RequiredError="A name for this game is required" @bind-Value="@_gameForUpdateDto.Name"
                                  TextChanged="OnNameChanged" Immediate="true"/>
                    <MudSelect T="string" Required="true" Label="Platforms" MultiSelection="true" @bind-Value="_value"
                               @bind-SelectedValues="SelectedPlatforms" Clearable="true">
                        @if (_platformDtos != null)
                        {
                            foreach (var platformDto in _platformDtos.OrderBy(x => x.Name).ToList())
                            {
                                <MudSelectItem T="string" Value="@platformDto.Name">@platformDto.Name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                    <MudGrid>
                        <MudItem lg="6" md="6" xs="12" sm="12">
                            <MudFileUpload T="IBrowserFile" Accept=".jpg,.png" FilesChanged="UploadFiles"
                                           MaximumFileCount="1">
                                <ButtonTemplate>
                                    <MudButton HtmlTag="label"
                                               Variant="Variant.Filled"
                                               Color="Color.Primary"
                                               StartIcon="@Icons.Material.Filled.Image"
                                               for="@context">
                                        Upload Image (only .jpg and png)
                                    </MudButton>
                                </ButtonTemplate>
                            </MudFileUpload>
                            <MudToolBar DisableGutters="true" Class="gap-4">
                                <MudText>@_files.Count.ToString() Bilder zwischengespeichert</MudText>
                                <MudButton OnClick="ClearImages" Disabled="@(!_files.Any())" Color="Color.Error"
                                           Variant="Variant.Filled">Clear
                                </MudButton>
                            </MudToolBar>
                        </MudItem>
                        <MudItem lg="1" md="3" xs="12" sm="12">
                            <MudImage Src="@TurnByteArrayToImage(_imageBytes)" ObjectFit="ObjectFit.Fill"
                                      Alt="Picture of the Game" Elevation="0" Fluid="true"
                                      Class="rounded-3 mx-auto d-block m-3" Style="max-width: 12rem;"/>
                        </MudItem>
                    </MudGrid>
                    <div class="align-content-center mt-4">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true"
                                   Disabled="@(!_success)" Class="m-auto" OnClick="@(async () => await Update())">Update
                        </MudButton>
                    </div>
                </MudForm>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

@* ReSharper disable NotAccessedField.Local *@

@code {
    private HttpClient HttpClient => HttpClientFactory.CreateClient("RpgStatsApi");
    private GameDetailDto? _game;
    private readonly GameForUpdateDto _gameForUpdateDto = new();
    private List<PlatformDto>? _platformDtos = new();
    private IEnumerable<string?> SelectedPlatforms { get; set; } = new HashSet<string>();
    private readonly IList<IBrowserFile> _files = new List<IBrowserFile>();
    private string _value = "Nothing selected.";
    private MudForm? _form;
    private bool _success;
    private string[] _errors = { };
    private byte[] _imageBytes = Array.Empty<byte>();

    [Parameter] public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetGame();
        await GetPlatforms();
        PrefillForm();
    }

    private async Task GetGame()
    {
        var response = await HttpClient.GetFromJsonAsync<WebApiResponse<GameDetailDto>>($"api/Game/GetGameDetailById/{Id}");
        _game = response?.Data;
    }

    private async Task Update()
    {
        if (_files.Count == 0)
        {
            _gameForUpdateDto.Picture = _game?.Picture;
        }

        var updateResponse = await HttpClient.PutAsJsonAsync($"api/Game/UpdateGame/{Id}", _gameForUpdateDto);
        var updateContent = await updateResponse.Content.ReadFromJsonAsync<WebApiResponse<GameDto>>();
        if (updateContent?.Success == false)
        {
            await ShowErrorMessage(updateContent.ErrorMessage ?? "Es ist ein Fehler aufgetreten.");
            return;
        }

        var deleteResponse = await HttpClient.DeleteAsync($"api/PlatformGame/DeletePlatformGamesByGame/{Id}");
        var deleteContent = await deleteResponse.Content.ReadFromJsonAsync<WebApiResponse<List<PlatformGameDto>>>();
        if (deleteContent?.Success == false)
        {
            await ShowErrorMessage(deleteContent.ErrorMessage ?? "Es ist ein Fehler aufgetreten.");
            return;
        }

        List<long> selectPlatformIds = new();
        foreach (var platformName in SelectedPlatforms)
        {
            if (string.IsNullOrEmpty(platformName))
            {
                continue;
            }

            var id = await GetIdOfPlatform(platformName);
            selectPlatformIds.Add(id);
        }

        foreach (var platformId in selectPlatformIds)
        {
            var response = await HttpClient.PostAsJsonAsync($"api/PlatformGame/CreatePlatformGame/{platformId}/{Id}", "");
            var content = await response.Content.ReadFromJsonAsync<WebApiResponse<PlatformGameDto>>();
            if (content?.Success != false) continue;
            await ShowErrorMessage(content.ErrorMessage ?? "Es ist ein Fehler aufgetreten.");
            return;
        }

        _gameForUpdateDto.Name = "";
        _files.Clear();
        SelectedPlatforms = new HashSet<string>();

        await ShowSuccessDialog();

        await JsRuntime.InvokeVoidAsync("history.back");
    }

    private async Task ShowSuccessDialog()
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Das Spiel wurde erfolgreich geändert." },
            { "ButtonText", "OK" },
            { "Color", Color.Success }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small
        };

        var dialog = await DialogService.ShowAsync<MessageDialog>("Erfolg", parameters, options);
        await dialog.Result;
    }

    private async Task GetPlatforms()
    {
        var response = await HttpClient.GetFromJsonAsync<WebApiResponse<List<PlatformDto>>>("api/Platform/GetPlatforms");
        _platformDtos = response?.Data;
    }

    private void PrefillForm()
    {
        if (_game == null) return;
        _gameForUpdateDto.Name = _game.Name;

        if (_game?.PlatformWithoutFkObjectsDtos != null)
            foreach (var platform in _game.PlatformWithoutFkObjectsDtos.OrderBy(x => x.Name).ToList())
            {
                SelectedPlatforms = SelectedPlatforms.Append(platform.Name);
            }

        if (_game?.Picture != null)
        {
            _imageBytes = _game.Picture;
        }
    }

    private async Task<long> GetIdOfPlatform(string platformName)
    {
        var response = await HttpClient.GetFromJsonAsync<WebApiResponse<List<PlatformDetailDto>>>($"api/Platform/GetPlatformsDetailByName/{platformName}");
        var platformList = response?.Data;
        var platform = platformList?.FirstOrDefault();
        var id = platform?.Id ?? 0;
        return id;
    }

    private async Task UploadFiles(IBrowserFile? file)
    {
        if (_files.Count <= 0)
        {
            if (file != null) _files.Add(file);
        }
        else
        {
            if (file != null) _files[0] = file;
        }

        using var ms = new MemoryStream();
        var stream = file?.OpenReadStream(4096000L);
        if (stream != null) await stream.CopyToAsync(ms);
        _imageBytes = ms.ToArray();

        var resizedImageBytes = ImageService.ResizeImageTo512(_imageBytes, SKFilterQuality.High);

        _gameForUpdateDto.Picture = resizedImageBytes;
    }

    private static string TurnByteArrayToImage(byte[] imageBytes)
    {
        var imageSrc = ImageService.ConvertByteArrayToImage(imageBytes);

        return imageSrc;
    }

    private void ClearImages()
    {
        _gameForUpdateDto.Picture = null;
        _imageBytes = Array.Empty<byte>();
        _files.Clear();
    }

    private void OnNameChanged(string value)
    {
        if (SelectedPlatforms.Any())
        {
            _success = !string.IsNullOrWhiteSpace(value);
        }
    }

    private async Task ShowErrorMessage(string text)
    {
        await DialogService.ShowMessageBox("Error", text);
    }
}

@* ReSharper restore NotAccessedField.Local *@
