@page "/gameDetail/{Id:int}"
@using RpgStats.Services.Abstractions
@using RpgStats.Dto
@inject IGameService GameService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

@if (_game == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" Style="margin-top: 2em"/>
}
else
{
    @*<MudText>@_game.Id</MudText>
    <MudText>@_game.Name</MudText>
    <MudImage Src="@TurnByteArrayToImage(_game)" ObjectFit="ObjectFit.Fill" Width="250" Height="250" Alt="Picture of this Game" Elevation="2" Fluid="true" Class="rounded-3 m-auto d-block"></MudImage>
    <MudText>On this platforms:</MudText>
    @if (_game.PlatformWithoutFkObjectsDtos != null)
    {
        foreach (var platform in _game.PlatformWithoutFkObjectsDtos)
        {
            <MudText>@platform.Name</MudText>
        }
    }
    <MudText>Characters:</MudText>
    @if (_game.CharacterWithoutFkObjectsDtos != null)
    {
        foreach (var character in _game.CharacterWithoutFkObjectsDtos)
        {
            <MudText>@character.Name</MudText>
        }
    }*@

    <MudGrid>
        <MudItem md="12" sm="12">
            <MudText Typo="Typo.h3" Align="Align.Center">@_game.Name</MudText>
        </MudItem>
        <MudItem lg="4" md="6" sm="12">
            <MudImage Src="@TurnByteArrayToImage(_game)" ObjectFit="ObjectFit.Fill" Alt="Picture of this Game" Elevation="2" Fluid="true" Class="rounded-3 m-auto d-block" Style="max-width: 400px;"></MudImage>
        </MudItem>
        <MudItem lg="8" md="6" sm="12">
            <MudPaper Class="pa-4 border border-dark" Outlined="true" Elevation="10">
                <MudText Typo="Typo.h5" Class="mb-1">Platforms</MudText>
                @foreach (var platform in _game.PlatformWithoutFkObjectsDtos)
                {
                    <MudText Typo="Typo.body1" Class="mb-1">- @platform.Name</MudText>
                }
                <MudText Typo="Typo.h5" Class="mt-4">Characters</MudText>
                @foreach (var character in _game.CharacterWithoutFkObjectsDtos)
                {
                    <MudText Typo="Typo.body1" Class="mb-1">- @character.Name</MudText>
                }
            </MudPaper>
            <MudGrid Spacing="3" Style="Margin-top: 25px;">
                <MudItem xs="6">
                    <MudButton Href="@($"/updateGame/{_game.Id}")" ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" StartIcon="@Icons.Material.Filled.Update">Ändern</MudButton>
                </MudItem>
                <MudItem xs="6" Class="text-right">
                    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Error" FullWidth="true" StartIcon="@Icons.Material.Filled.Delete" OnClick="DeleteGame">Löschen</MudButton>
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>
}

@code {
    private GameDetailDto? _game;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetGame();
    }

    private async Task GetGame()
    {
        _game = await GameService.GetGameDetailDtoByIdAsync(Id);
    }

    private string TurnByteArrayToImage(GameDetailDto game)
    {
        string imageSrc = string.Empty;
        if (game.Picture != null)
        {
            imageSrc = Convert.ToBase64String(game.Picture);
        }

        var imageString = $"data:image/jpg;base64,{imageSrc}";
        return imageString;
    }

    private async Task DeleteGame()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Soll das Spiel wirklich gelöscht werden?");
        parameters.Add("ButtonText", "Löschen");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions()
        {
            CloseButton = true,
            MaxWidth = MaxWidth.ExtraSmall
        };

        var dialog = await DialogService.ShowAsync<DeleteDialog>("Löschen", parameters, options);
        var result = await dialog.Result;
        
        if (result.Canceled == false)
        {
            await GameService.DeleteGameAsync(Id);
            NavigationManager.NavigateTo("/allGames");
        }
    }
}
