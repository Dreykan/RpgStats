@page "/gameDetail/{Id:int}"
@using RpgStats.BizLogic
@using RpgStats.BlazorServer.Model
@using RpgStats.Dto
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory

@if (_game == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" Style="margin-top: 2em"/>
}
else
{
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h3" Align="Align.Center">@_game.Name</MudText>
        </MudItem>
        <MudItem lg="4" md="6" sm="12">
            @if (_game.Picture == null)
            {
                <MudCardMedia Image="images/placeholder-1.png" Title="placeholder-1"/>
            }
            else
            {
                <MudImage Src="@TurnByteArrayToImage(_game.Picture)" ObjectFit="ObjectFit.Fill"
                          Alt="Picture of this Game" Elevation="2" Fluid="true" Class="rounded-3 m-auto d-block"
                          Style="max-width: 400px;"></MudImage>
            }
        </MudItem>
        <MudItem lg="8" md="6" sm="12">
            <MudPaper Class="pa-4 border border-dark" Outlined="true" Elevation="10">
                <MudText Typo="Typo.h5" Class="mb-1">Platforms</MudText>
                @if (_game != null)
                {
                    if (_game.PlatformWithoutFkObjectsDtos != null)
                    {
                        foreach (var platform in _game.PlatformWithoutFkObjectsDtos.OrderBy(x => x.Name).ToList())
                        {
                            <MudText Typo="Typo.body1" Class="mb-1">- @platform.Name</MudText>
                        }
                    }

                    <MudText Typo="Typo.h5" Class="mt-4">
                        Characters
                        <MudIconButton Icon="@Icons.Material.Filled.PersonAddAlt1" Color="Color.Info"
                                       Href="@($"/newCharacter/{_game.Name}")"/>
                    </MudText>
                    <MudGrid Class="my-4">
                        @if (_game.CharacterWithoutFkObjectsDtos != null)
                        {
                            foreach (var character in _game.CharacterWithoutFkObjectsDtos)
                            {
                                <MudLink Class="mx-5" Typo="Typo.body1" Color="Color.Info"
                                         Href="@($"/characterDetail/{character.Id}")">
                                    @if (character.Picture == null)
                                    {
                                        <MudAvatar Size="Size.Large">
                                            <MudImage Src="images/placeholder-3.png"></MudImage>
                                        </MudAvatar>
                                    }
                                    else
                                    {
                                        <MudAvatar Size="Size.Large">
                                            <MudImage Src="@TurnByteArrayToImage(character.Picture)"></MudImage>
                                        </MudAvatar>
                                    }
                                    <MudText Typo="Typo.body1" Class="mb-1">@character.Name</MudText>
                                </MudLink>
                            }
                        }
                    </MudGrid>
                    <MudTooltip Class="mt-4" Duration="250" Delay="1000" Placement="Placement.Top"
                                Text="Diese Statuswerte-Typen kommen in diesem Spiel vor.">
                        <MudText Typo="Typo.h5">
                            Status-Typen
                            <MudIconButton Icon="@Icons.Material.Filled.AddLink" Color="Color.Info"
                                           OnClick="async () => await LinkGameStat()"/>
                        </MudText>
                    </MudTooltip>
                    <MudGrid Class="my-4">
                        @if (_gameStats != null)
                        {
                            @foreach (var gameStat in _gameStats)
                            {
                                <MudTooltip Class="mt-4" Duration="250" Delay="1000" Placement="Placement.Top"
                                            Text="@gameStat.CustomStatName">
                                    <MudChip Class="mx-9" Color="Color.Secondary" OnClose="RemoveMudChip" Text="@gameStat.CustomStatShortName"/>
                                </MudTooltip>
                            }
                        }
                    </MudGrid>
                }


            </MudPaper>
            <MudGrid Spacing="3" Style="Margin-top: 25px;">
                <MudItem xs="6">
                    <MudButton Href="@($"/updateGame/{_game.Id}")" ButtonType="ButtonType.Button"
                               Variant="Variant.Filled" Color="Color.Primary" FullWidth="true"
                               StartIcon="@Icons.Material.Filled.Update">Ändern
                    </MudButton>
                </MudItem>
                <MudItem xs="6" Class="text-right">
                    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Error"
                               FullWidth="true" StartIcon="@Icons.Material.Filled.Delete" OnClick="DeleteGame">Löschen
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>
}

@code {
    private HttpClient HttpClient => HttpClientFactory.CreateClient("RpgStatsApi");
    private GameDetailDto? _game;
    private List<GameStatDto>? _gameStats = new();

    [Parameter] public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetGame();
        await GetGameStats();
    }

    private async Task GetGame()
    {
        var response = await HttpClient.GetFromJsonAsync<WebApiResponse<GameDetailDto>>($"api/Game/GetGameDetailById/{Id}");
        _game = response?.Data;
    }

    private static string TurnByteArrayToImage(byte[] imageBytes)
    {
        return ImageService.ConvertByteArrayToImage(imageBytes);
    }

    private async Task DeleteGame()
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Soll das Spiel wirklich gelöscht werden?" },
            { "ButtonText", "Löschen" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.ExtraSmall
        };

        var dialog = await DialogService.ShowAsync<DeleteDialog>("Löschen", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled == false)
        {
            var response = await HttpClient.DeleteAsync($"api/Game/DeleteGame/{Id}");
            var content = await response.Content.ReadFromJsonAsync<WebApiResponse<GameDto>>();
            if (!response.IsSuccessStatusCode || content?.Success == false)
            {
                await ShowErrorMessage(content?.ErrorMessage ?? "Fehler beim Löschen des Spiels.");
                return;
            }

            NavigationManager.NavigateTo("/allGames");

        }
    }

    private async Task GetGameStats()
    {
        var response = await HttpClient.GetAsync($"api/GameStat/GetGameStatsByGame/{_game?.Id}");
        if (response.IsSuccessStatusCode == false)
        {
            _gameStats = new List<GameStatDto>();
            return;
        }
        var rpgStatsResponse = await response.Content.ReadFromJsonAsync<WebApiResponse<List<GameStatDto>>>();
        _gameStats = rpgStatsResponse?.Data?.OrderBy(x => x.SortIndex).ToList();
    }

    private async Task LinkGameStat()
    {
        var dialogOptions = new DialogOptions { CloseOnEscapeKey = true };

        var dialogParameter = new DialogParameters { { "Game", _game } };
        var dialog = await DialogService.ShowAsync<LinkGameStatDialog>($"Status-Typ mit dem Spiel: {_game?.Name} verknüpfen.", dialogParameter, dialogOptions);
        var result = await dialog.Result;
        if (result.Canceled == false)
        {
            await GetGameStats();
        }
    }

    private async Task ShowErrorMessage(string text)
    {
        await DialogService.ShowMessageBox("Error", text);
    }

    private async Task RemoveMudChip(MudChip chip)
    {
        var gameStat = _gameStats?.FirstOrDefault(x => x.CustomStatShortName == chip.Text);

        if (gameStat == null)
        {
            await ShowErrorMessage($"GameStat nicht gefunden. {chip.Text}");
            return;
        }

        var response = await HttpClient.GetAsync($"api/StatValue/GetStatValuesByStat/{gameStat.StatId}");
        var statValues = await response.Content.ReadFromJsonAsync<WebApiResponse<List<StatValueDto>>>();

        if (statValues?.Data == null)
        {
            await RemoveGameStat(gameStat);
            return;
        }

        if (_game == null || _game.CharacterWithoutFkObjectsDtos == null)
            return;

        var anyCharacterHasStatValue = false;
        foreach (var character in _game.CharacterWithoutFkObjectsDtos)
        {
            anyCharacterHasStatValue = statValues.Data.Any(x => x.CharacterId == character.Id);
            if (anyCharacterHasStatValue)
                break;
        }

        if (anyCharacterHasStatValue)
        {
            await ShowErrorMessage("Es gibt noch Charaktere, die noch Statuswerte mit diesem Status haben. Bitte lösche zuerst die Einträge bevor die Zuordnung entfernt werden kann.");
            return;
        }

        await RemoveGameStat(gameStat);
    }

    private async Task RemoveGameStat(GameStatDto gameStatDto)
    {
        var response = await HttpClient.DeleteAsync($"api/GameStat/DeleteGameStat/{gameStatDto.Id}");
        var content = await response.Content.ReadFromJsonAsync<WebApiResponse<GameStatDto>>();
        if (!response.IsSuccessStatusCode || content?.Success == false)
        {
            await ShowErrorMessage(content?.ErrorMessage ?? "Fehler beim Löschen des Status-Typs.");
            return;
        }

        await GetGameStats();
    }
}
