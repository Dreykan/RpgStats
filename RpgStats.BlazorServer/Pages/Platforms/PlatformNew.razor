@page "/newPlatform"
@using RpgStats.Dto
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory

<MudText Typo="Typo.h4" Align="Align.Center">Erstelle eine neue Platform</MudText>

<MudGrid Class="mt-5">
    <MudItem xs="12" sm="12">
        <MudPaper Class="pa-0">
            <MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors">
                <MudTextField Clearable="true" T="string" Label="Name" Required="true"
                              RequiredError="Ein Name ist schon erforderlich..."
                              @bind-Value="_platformForCreationDto.Name" TextChanged="@(OnNameChanged)"
                              Immediate="true"/>
                <div class="align-content-center mt-4">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Disabled="!_success"
                               Class="m-auto" OnClick="@(async () => await Create())">Erstellen
                    </MudButton>
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private HttpClient HttpClient => HttpClientFactory.CreateClient("RpgStatsApi");
    private readonly PlatformForCreationDto _platformForCreationDto = new();
    private MudForm? _form;
    private bool _success;
    private string[] _errors = { };

    private async Task Create()
    {
        if (_form is null)
        {
            return;
        }

        var result = await HttpClient.PostAsJsonAsync("api/Platform/CreatePlatform", _platformForCreationDto);
        if (result.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/allPlatforms");
        }
        else
        {
            _errors = new[] { "Error while creating the platform" };
        }
    }

    private void OnNameChanged(string value)
    {
        _success = !string.IsNullOrWhiteSpace(value);
    }

}
