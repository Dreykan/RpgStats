@page "/updatePlatform/{Id:int}"
@using RpgStats.Services.Abstractions
@using RpgStats.Dto
@inject IPlatformService PlatformService
@inject NavigationManager NavigationManager

@if (_platform == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" Style="margin-top: 2em" />
}
else
{
    <MudText Typo="Typo.h4" Align="Align.Center">Update die Platform: @_platform.Name</MudText>

    <MudGrid Class="mt-5">
        <MudItem xs="12" sm="12">
            <MudPaper Class="pa-0">
                <MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors">
                    <MudTextField Clearable="true" T="string" Label="Name" Required="true" RequiredError="Ein Name ist schon erforderlich..." @bind-Value="@_platformForUpdateDto.Name"/>
                    <div class="align-content-center mt-4">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Class="m-auto" OnClick="@(async () => await Update())">Ändern</MudButton>
                    </div>
                </MudForm>
            </MudPaper>
        </MudItem>
    </MudGrid>
}



@code {
    private PlatformDetailDto? _platform;
    private readonly PlatformForUpdateDto _platformForUpdateDto = new();
    private MudForm? _form;
    private bool _success;
    private string[] _errors = { };

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetPlatform();
        _platformForUpdateDto.Name = _platform.Name;
    }

    private async Task GetPlatform()
    {
        _platform = await PlatformService.GetPlatformDetailDtoByIdAsync(Id);
    }

    private async Task Update()
    {
        if (_form is null)
        {
            return;
        }
        var result = await PlatformService.UpdatePlatformAsync(Id, _platformForUpdateDto);
        if (result is null)
        {
            return;
        }
        NavigationManager.NavigateTo("/allPlatforms");
    }
}
