@page "/allPlatforms"
@using RpgStats.BizLogic
@using RpgStats.BlazorServer.Model
@using RpgStats.Dto
@inject IDialogService DialogService
@inject IHttpClientFactory HttpClientFactory

<MudGrid>
    @if (_platforms == null)
    {
        <MudItem xs="12">
            <MudProgressCircular Color="Color.Default" Indeterminate="true" Style="margin-top: 2em"/>
        </MudItem>
    }
    else
    {
        <MudItem xs="12">
            <MudButton Href="/newPlatform" Variant="Variant.Filled" Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.OpenInNew" FullWidth="true" Size="Size.Large">Neue Plattform
            </MudButton>
        </MudItem>

        @foreach (var platform in _platforms)
        {
            <div class="card-group">
                <MudCard Class="m-2" Style="min-width: 24rem; max-width: 24rem; min-height: 500px;" Elevation="15">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h4" Align="Align.Center">@platform.Name</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default"
                                           Href="@($"/updatePlatform/{platform.Id}")"/>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error"
                                           OnClick="@(async () => await DeletePlatform(platform.Id))"/>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText Typo="Typo.h5">Games:</MudText>
                        @if (platform.GameWithoutFkObjectsDtos != null)
                        {
                            foreach (var game in platform.GameWithoutFkObjectsDtos.OrderBy(x => x.Name).ToList())
                            {
                                <MudText>
                                    <MudLink Typo="Typo.body1" Href="@($"/gameDetail/{game.Id}")" Color="Color.Info">
                                        @if (game.Picture == null)
                                        {
                                            <MudAvatar Size="Size.Large">
                                                <MudImage Src="images/placeholder-1.png"></MudImage>
                                            </MudAvatar>
                                        }
                                        else
                                        {
                                            <MudAvatar Size="Size.Large">
                                                <MudImage Src="@TurnByteArrayToImage(game.Picture)"></MudImage>
                                            </MudAvatar>
                                        }
                                        @game.Name
                                    </MudLink>
                                </MudText>
                            }
                        }
                    </MudCardContent>
                </MudCard>
            </div>
        }
    }

</MudGrid>

@code {
    private HttpClient HttpClient => HttpClientFactory.CreateClient("RpgStatsApi");
    private List<PlatformDetailDto>? _platforms;

    protected override async Task OnInitializedAsync()
    {
        await GetPlatforms();
    }

    private async Task GetPlatforms()
    {
        var response = await HttpClient.GetAsync("/api/Platform/GetPlatformsDetail");
        if (!response.IsSuccessStatusCode)
        {
            _platforms = new List<PlatformDetailDto>();
            return;
        }

        var result = await response.Content.ReadFromJsonAsync<RpgStatsResponse<List<PlatformDetailDto>>>();
        _platforms = result?.Data?.OrderBy(x => x.Name).ToList();
    }

    private async Task DeletePlatform(long id)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Soll die Plattform wirklich gelöscht werden?" },
            { "ButtonText", "Löschen" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.ExtraSmall
        };

        var dialog = await DialogService.ShowAsync<DeleteDialog>("Löschen", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled == false)
        {
            var response = await HttpClient.DeleteAsync($"/api/Platform/DeletePlatform/{id}");
            var content = await response.Content.ReadFromJsonAsync<RpgStatsResponse<PlatformDto>>();
            if (!response.IsSuccessStatusCode || content?.Success == false)
            {
                await ShowErrorMessage(content?.ErrorMessage ?? "Fehler beim Löschen der Plattform.");
                return;
            }
            await GetPlatforms();
        }
    }

    private static string TurnByteArrayToImage(byte[] imageBytes)
    {
        return ImageService.ConvertByteArrayToImage(imageBytes);
    }

    private async Task ShowErrorMessage(string text)
    {
        await DialogService.ShowMessageBox("Error", text);
    }
}
