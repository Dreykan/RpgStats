@page "/newCharacter"
@page "/newCharacter/{GameName?}"
@using RpgStats.BizLogic
@using RpgStats.Dto
@using SkiaSharp
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<MudText Typo="Typo.h4" Align="Align.Center">Erstelle einen neuen Charakter</MudText>

<MudGrid Class="mt-5">
    <MudItem xs="12">
        <MudPaper Class="pa-0">
            <MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors">
                <MudTextField Clearable="true" T="string" Label="Name" Required="true"
                              RequiredError="Der Charakter sollte schon einen Namen haben..."
                              @bind-Value="@_characterForCreationDto.Name" TextChanged="OnNameChanged"
                              Immediate="true"/>
                <MudSelect T="string" Required="true" Label="Games" MultiSelection="false" @bind-Value="_value"
                           @bind-SelectedValues="SelectedGame" Clearable="true">
                    @if (_gameDtos != null)
                    {
                        foreach (var gameDto in _gameDtos.OrderBy(x => x.Name).ToList())
                        {
                            <MudSelectItem T="string" Value="@gameDto.Name">@gameDto.Name</MudSelectItem>
                        }
                    }
                </MudSelect>
                <MudGrid>
                    <MudItem lg="6" md="6" sm="12" xs="12">
                        <MudFileUpload T="IBrowserFile" Accept=".jpg,.png" FilesChanged="UploadFile"
                                       MaximumFileCount="1">
                            <ButtonTemplate>
                                <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.Image" for="@context">
                                    Upload Image (jpg, png)
                                </MudButton>
                            </ButtonTemplate>
                        </MudFileUpload>
                        <MudToolBar DisableGutters="true" Class="gap-4">
                            <MudText>@_files.Count.ToString() Bilder zwischengespeichert</MudText>
                            <MudButton OnClick="ClearImage" Disabled="@(!_files.Any())" Color="Color.Error"
                                       Variant="Variant.Filled">Clear
                            </MudButton>
                        </MudToolBar>
                    </MudItem>
                    <MudItem lg="1" md="3" sm="12" xs="12">
                        <MudImage Src="@TurnByteArrayToImage(_imageBytes)" ObjectFit="ObjectFit.Fill"
                                  Alt="Bild des Charakters" Elevation="0" Fluid="true"
                                  Class="rounded-3 mx-auto d-block m-3" Style="max-width: 12rem;"/>
                    </MudItem>
                </MudGrid>
                <div class="align-content-center mt-4">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Disabled="@(!_success)"
                               Class="m-auto" OnClick="@(async () => await Create())">Erstellen
                    </MudButton>
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@* ReSharper disable NotAccessedField.Local *@

@code {
    private readonly CharacterForCreationDto _characterForCreationDto = new();
    private List<GameDto>? _gameDtos = new();
    private MudForm? _form;
    private bool _success;
    private string[] _errors = { };
    private string _value = string.Empty;
    private IEnumerable<string> SelectedGame { get; set; } = new HashSet<string>();
    private readonly IList<IBrowserFile> _files = new List<IBrowserFile>();
    private byte[] _imageBytes = Array.Empty<byte>();

    [Parameter] public string? GameName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _gameDtos = await HttpClient.GetFromJsonAsync<List<GameDto>>("api/Game/GetGames");
        await PrefillForm();
    }

    private async Task Create()
    {
        if (!SelectedGame.Any() || _gameDtos == null)
        {
            await ShowErrorMessage("Es wurde kein Spiel ausgewählt.");
            return;
        }

        var selectedGame = _gameDtos.FirstOrDefault(x => x.Name == SelectedGame.FirstOrDefault());

        if (selectedGame == null)
        {
            await ShowErrorMessage("Das ausgewählte Spiel existiert nicht.");
            return;
        }

        var response = await HttpClient.PostAsJsonAsync($"api/Character/CreateCharacter/{selectedGame.Id}", _characterForCreationDto);

        if (!response.IsSuccessStatusCode)
        {
            await ShowErrorMessage("Es ist ein Fehler aufgetreten.");
            return;
        }

        NavigationManager.NavigateTo($"/gameDetail/{selectedGame.Id}");
    }

    private async Task UploadFile(IBrowserFile? file)
    {
        if (_files.Count <= 0)
        {
            if (file != null) _files.Add(file);
        }
        else
        {
            await ShowErrorMessage("Es kann nur ein Bild hochgeladen werden.");
        }

        using MemoryStream ms = new();
        var stream = file?.OpenReadStream(4096000L);
        if (stream != null) await stream.CopyToAsync(ms);
        _imageBytes = ms.ToArray();

        var resizedImageBytes = ImageService.ResizeImageTo512(_imageBytes, SKFilterQuality.High);

        _characterForCreationDto.Picture = resizedImageBytes;
    }

    private async Task ShowErrorMessage(string text)
    {
        await DialogService.ShowMessageBox("Error", text);
    }

    private void ClearImage()
    {
        _characterForCreationDto.Picture = null;
        _imageBytes = Array.Empty<byte>();
        _files.Clear();
    }

    private static string TurnByteArrayToImage(byte[] imageBytes)
    {
        return ImageService.ConvertByteArrayToImage(imageBytes);
    }

    private Task PrefillForm()
    {
        if (string.IsNullOrEmpty(GameName)) return Task.CompletedTask;
        var gameDto = _gameDtos?.FirstOrDefault(x => x.Name == GameName);
        if (gameDto == null) return Task.CompletedTask;
        SelectedGame = new HashSet<string> { gameDto.Name };
        _value = gameDto.Name;
        return Task.CompletedTask;
    }

    private void OnNameChanged(string value)
    {
        if (SelectedGame.Any())
        {
            _success = !string.IsNullOrWhiteSpace(value);
        }
    }

}

@* ReSharper restore NotAccessedField.Local *@
