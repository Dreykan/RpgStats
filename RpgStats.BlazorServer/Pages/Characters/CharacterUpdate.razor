@page "/updateCharacter/{id:int}"
@using RpgStats.BizLogic
@using RpgStats.Dto
@using RpgStats.Services.Abstractions
@using SkiaSharp
@inject ICharacterService CharacterService
@inject IGameService GameService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

@if (_character == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" Style="margin-top: 2em"/>
}
else
{
    <MudText Typo="Typo.h4" Align="Align.Center">Update den Charakter @_character.Name</MudText>

    <MudGrid Class="mt-5">
        <MudItem xs="12">
            <MudPaper Class="pa-0">
                <MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors">
                    <MudTextField Clearable="true" T="string" Label="Name" Required="true"
                                  RequiredError="Der Charakter sollte schon einen Namen haben..."
                                  @bind-Value="@_characterForUpdateDto.Name" TextChanged="OnNameChanged"
                                  Immediate="true"/>
                    <MudSelect T="string" Required="true" Label="Games" MultiSelection="false" @bind-Value="_value"
                               @bind-SelectedValues="SelectedGame" Clearable="true">
                        @foreach (var gameDto in _gameDtos.OrderBy(x => x.Name).ToList())
                        {
                            <MudSelectItem T="string" Value="@gameDto.Name">@gameDto.Name</MudSelectItem>
                        }
                    </MudSelect>
                    <MudGrid>
                        <MudItem lg="6" md="6" sm="12" xs="12">
                            <MudFileUpload T="IBrowserFile" Accept=".jpg,.png" FilesChanged="UploadFile"
                                           MaximumFileCount="1">
                                <ButtonTemplate>
                                    <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary"
                                               StartIcon="@Icons.Material.Filled.Image" for="@context">
                                        Upload Image (jpg, png)
                                    </MudButton>
                                </ButtonTemplate>
                            </MudFileUpload>
                            <MudToolBar DisableGutters="true" Class="gap-4">
                                <MudText>@_files.Count.ToString() Bilder zwischengespeichert</MudText>
                                <MudButton OnClick="ClearImage" Disabled="@(!_files.Any())" Color="Color.Error"
                                           Variant="Variant.Filled">Clear
                                </MudButton>
                            </MudToolBar>
                        </MudItem>
                        <MudItem lg="1" md="3" sm="12" xs="12">
                            <MudImage Src="@TurnByteArrayToImage(_imageBytes)" ObjectFit="ObjectFit.Fill"
                                      Alt="Bild des Charakters" Elevation="0" Fluid="true"
                                      Class="roundes-3 mx-auto d-block m-3" Style="max-width: 12rem;"/>
                        </MudItem>
                    </MudGrid>
                    <div class="align-content-center mt-4">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true"
                                   Disabled="@(!_success)" Class="m-auto" OnClick="@(async () => await Update())">Ändern
                        </MudButton>
                    </div>
                </MudForm>
            </MudPaper>
        </MudItem>
    </MudGrid>
}



@* ReSharper disable NotAccessedField.Local *@

@code {
    private CharacterDetailDto? _character;

    private readonly CharacterForUpdateDto _characterForUpdateDto = new()
    {
        Name = "TestCharacter"
    };

    private List<GameDto> _gameDtos = new();
    private MudForm? _form;
    private bool _success;
    private string[] _errors = { };
    private string _value = string.Empty;
    private IEnumerable<string?> SelectedGame { get; set; } = new HashSet<string>();
    private readonly IList<IBrowserFile> _files = new List<IBrowserFile>();
    private byte[] _imageBytes = Array.Empty<byte>();

    [Parameter] public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetCharacter();
        _gameDtos = await GameService.GetAllGamesAsync();
        await PrefillForm();
    }

    private async Task GetCharacter()
    {
        _character = await CharacterService.GetCharacterDetailDtoByIdAsync(Id);
    }

    private async Task Update()
    {
        if (_files.Count == 0)
        {
            _characterForUpdateDto.Picture = _character?.Picture;
        }

        var selectedGame = _gameDtos.FirstOrDefault(x => x.Name == SelectedGame.FirstOrDefault());

        if (_character == null || selectedGame == null)
        {
            await ShowErrorMessage("Charakter oder Spiel nicht gefunden.");
            return;
        }

        var result = await CharacterService.UpdateCharacterAsync(_character.Id, selectedGame.Id, _characterForUpdateDto);

        if (result?.Id != null)
        {
            NavigationManager.NavigateTo($"/characterDetail/{result.Id}");
        }
        else
        {
            await ShowErrorMessage("Es ist ein Fehler aufgetreten.");
        }
    }

    private async Task UploadFile(IBrowserFile? file)
    {
        if (_files.Count <= 0)
        {
            if (file != null) _files.Add(file);
        }
        else
        {
            if (file != null) _files[0] = file;
        }

        using MemoryStream ms = new();
        var stream = file?.OpenReadStream(4096000L);
        if (stream != null) await stream.CopyToAsync(ms);
        _imageBytes = ms.ToArray();

        var resizedImageBytes = ImageService.ResizeImageTo512(_imageBytes, SKFilterQuality.High);

        _characterForUpdateDto.Picture = resizedImageBytes;
    }

    private async Task ShowErrorMessage(string text)
    {
        await DialogService.ShowMessageBox("Error", text);
    }

    private void ClearImage()
    {
        _characterForUpdateDto.Picture = null;
        _imageBytes = Array.Empty<byte>();
        _files.Clear();
    }

    private static string TurnByteArrayToImage(byte[] imageBytes)
    {
        return ImageService.ConvertByteArrayToImage(imageBytes);
    }

    private Task PrefillForm()
    {
        if (_character == null)
        {
            return Task.CompletedTask;
        }

        _characterForUpdateDto.Name = _character.Name;

        if (_character.GameWithoutFkObjectsDto != null)
        {
            SelectedGame = SelectedGame.Append(_character.GameWithoutFkObjectsDto.Name);
        }

        if (_character.Picture != null)
        {
            _imageBytes = _character.Picture;
        }

        return Task.CompletedTask;
    }

    private void OnNameChanged(string value)
    {
        if (SelectedGame.Any())
        {
            _success = !string.IsNullOrWhiteSpace(value);
        }
    }

}

@* ReSharper restore NotAccessedField.Local *@
