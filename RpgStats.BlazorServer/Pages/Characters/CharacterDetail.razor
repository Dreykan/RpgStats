@page "/characterDetail/{Id:int}"
@using RpgStats.BizLogic
@using RpgStats.Dto
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

@if (_character == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" Style="margin-top: 2em"/>
}
else
{
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h3" Align="Align.Center">@_character.Name</MudText>
        </MudItem>
        <MudItem lg="4" md="6" sm="12">
            @if (_character.Picture == null)
            {
                <MudCardMedia Image="images/placeholder-3.png" Title="placeholder-3"/>
            }
            else
            {
                <MudImage Src="@TurnByteArrayToImage(_character.Picture)" ObjectFit="ObjectFit.Fill"
                          Alt="Picture of this Character" Elevation="2" Fluid="true" Class="rounded-3 m-auto d-block"
                          Style="max-width: 400px;"></MudImage>
            }
        </MudItem>
        <MudItem lg="8" md="6" sm="12">
            <MudPaper Class="pa-4 border border-dark" Outlined="true" Elevation="10">
                <MudText>
                    @if (_character.GameWithoutFkObjectsDto != null)
                    {
                        <MudLink Typo="Typo.h5" Href="@($"/gameDetail/{_character.GameWithoutFkObjectsDto.Id}")">
                            @if (_character.GameWithoutFkObjectsDto.Picture == null)
                            {
                                <MudAvatar Size="Size.Large">
                                    <MudImage Src="images/placeholder-3.png"></MudImage>
                                </MudAvatar>
                            }
                            else
                            {
                                <MudAvatar Size="Size.Large">
                                    <MudImage
                                        Src="@TurnByteArrayToImage(_character.GameWithoutFkObjectsDto.Picture)"></MudImage>
                                </MudAvatar>
                            }
                            @_character.GameWithoutFkObjectsDto.Name
                        </MudLink>
                    }
                </MudText>
            </MudPaper>
            <MudGrid Spacing="3" Style="Margin-top: 25px;">
                <MudItem xs="6">
                    <MudButton Href="@($"/updateCharacter/{_character.Id}")" ButtonType="ButtonType.Button"
                               Variant="Variant.Filled" Color="Color.Primary" FullWidth="true"
                               StartIcon="@Icons.Material.Filled.Update">Ändern
                    </MudButton>
                </MudItem>
                <MudItem xs="6" Class="text-right">
                    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Error"
                               FullWidth="true" StartIcon="@Icons.Material.Filled.Delete" OnClick="DeleteCharacter">
                        Löschen
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="12">
            <MudTable Items="@_statValues">
                <HeaderContent>
                    <MudTh>Level</MudTh>
                    @foreach (var stat in _stats)
                    {
                        <MudTh>@stat.ShortName</MudTh>
                    }
                </HeaderContent>
            </MudTable>
        </MudItem>
    </MudGrid>
}

@code {
    private CharacterDetailDto? _character;
    private List<StatValueDto>? _statValues = new();
    private readonly List<StatDto> _stats = new();

    [Parameter] public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetCharacter();
        await GetStatValues();
        await GetStats();
    }

    private async Task GetStatValues()
    {
        if (_character != null)
        {
            _statValues = await HttpClient.GetFromJsonAsync<List<StatValueDto>>($"api/statValues/byCharacter/{_character.Id}");
            // _statValues = await StatValueService.GetAllStatValuesByCharacterIdAsync(_character.Id);
        }
    }

    private async Task GetStats()
    {
        // Ermittle alle Stats, die zu den StatValues gehören und füge sie der Liste _stats hinzu, wenn noch nicht vorhanden
        if (_statValues != null)
            foreach (var statValue in _statValues)
            {
                var stat = await HttpClient.GetFromJsonAsync<StatDto>($"api/stats/{statValue.StatId}");
                if (stat != null && _stats.Contains(stat) == false)
                {
                    _stats.Add(stat);
                }
            }
    }

    private async Task GetCharacter()
    {
        _character = await HttpClient.GetFromJsonAsync<CharacterDetailDto>($"api/characters/details/{Id}");
    }

    private static string TurnByteArrayToImage(byte[] imageBytes)
    {
        return ImageService.ConvertByteArrayToImage(imageBytes);
    }

    private async Task DeleteCharacter()
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Soll der Charakter wirklich gelöscht werden?" },
            { "ButtonText", "Löschen" },
            { "Color", Color.Error }
        };
        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.ExtraSmall
        };
        var dialog = await DialogService.ShowAsync<DeleteDialog>("Löschen", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled == false)
        {
            await HttpClient.DeleteAsync($"api/characters/{Id}");
            NavigationManager.NavigateTo("/allCharacters");
        }
    }

}
