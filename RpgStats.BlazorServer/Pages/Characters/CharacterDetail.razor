@page "/characterDetail/{Id:int}"
@using RpgStats.BizLogic
@using RpgStats.BlazorServer.Model
@using RpgStats.Dto
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory

@if (_character == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" Style="margin-top: 2em"/>
}
else
{
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h3" Align="Align.Center">@_character.Name</MudText>
        </MudItem>
        <MudItem lg="4" md="6" sm="12">
            @if (_character.Picture == null)
            {
                <MudCardMedia Image="images/placeholder-3.png" Title="placeholder-3"/>
            }
            else
            {
                <MudImage Src="@TurnByteArrayToImage(_character.Picture)" ObjectFit="ObjectFit.Fill"
                          Alt="Picture of this Character" Elevation="2" Fluid="true" Class="rounded-3 m-auto d-block"
                          Style="max-width: 400px;"></MudImage>
            }
        </MudItem>
        <MudItem lg="8" md="6" sm="12">
            <MudPaper Class="pa-4 border border-dark" Outlined="true" Elevation="10">
                <MudText>
                    @if (_character.GameWithoutFkObjectsDto != null)
                    {
                        <MudLink Typo="Typo.h5" Href="@($"/gameDetail/{_character.GameWithoutFkObjectsDto.Id}")">
                            @if (_character.GameWithoutFkObjectsDto.Picture == null)
                            {
                                <MudAvatar Size="Size.Large">
                                    <MudImage Src="images/placeholder-3.png"></MudImage>
                                </MudAvatar>
                            }
                            else
                            {
                                <MudAvatar Size="Size.Large">
                                    <MudImage
                                        Src="@TurnByteArrayToImage(_character.GameWithoutFkObjectsDto.Picture)"></MudImage>
                                </MudAvatar>
                            }
                            @_character.GameWithoutFkObjectsDto.Name
                        </MudLink>
                    }
                </MudText>
            </MudPaper>
            <MudGrid Spacing="3" Style="Margin-top: 25px;">
                <MudItem xs="6">
                    <MudButton Href="@($"/updateCharacter/{_character.Id}")" ButtonType="ButtonType.Button"
                               Variant="Variant.Filled" Color="Color.Primary" FullWidth="true"
                               StartIcon="@Icons.Material.Filled.Update">Ändern
                    </MudButton>
                </MudItem>
                <MudItem xs="6" Class="text-right">
                    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Error"
                               FullWidth="true" StartIcon="@Icons.Material.Filled.PersonRemove" OnClick="DeleteCharacter">
                        Löschen
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="12">
            <MudPaper Class="pa-4 border border-dark" Outlined="true" Elevation="10">
                <MudGrid Spacing="3" Style="Margin-top: 6px; Margin-bottom: 18px;">
                    <MudText Typo="Typo.h5" Align="Align.Center" style="flex-grow: 1; text-align: center;">Statuswerte</MudText>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="AddNewStatValues" Disabled="(_gameStats == null || _gameStats.Count == 0)" style="margin-left: auto; margin-right: 2em; min-width: 100px">
                        Neu
                    </MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.RemoveCircleOutline" OnClick="RemoveStatValues" style="margin-right: 1em;">
                        Entfernen
                    </MudButton>
                </MudGrid>
                <MudTable Items="@GetStatValuesByLevel()" Dense="true" Hover="true" Breakpoint="Breakpoint.None" FixedHeader="true">
                    <HeaderContent>
                        <MudTh><strong>Level</strong></MudTh>
                        @if (_gameStats != null)
                        {
                            @foreach (var gameStat in _gameStats)
                            {
                                <MudTh>
                                    <MudTooltip Text="@gameStat.CustomStatName">
                                        <strong>@gameStat.CustomStatShortName</strong>
                                    </MudTooltip>
                                </MudTh>
                            }
                        }
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.Key</MudTd>
                        @if (_gameStats != null)
                        {
                            @foreach (var gameStat in _gameStats)
                            {
                                <MudTd>
                                    @{
                                        var statValue = context.Value.FirstOrDefault(sv => sv.StatId == gameStat.StatId);
                                        if (statValue != null)
                                        {
                                            <MudTooltip Text="@($"Basis: {statValue.Value}{Environment.NewLine}Bonus: +{statValue.ContainedBonusNum} / +{statValue.ContainedBonusPercent}%")">
                                                <MudText>@statValue.Value</MudText>
                                            </MudTooltip>
                                        }
                                        else
                                        {
                                            <MudText>-</MudText>
                                        }
                                    }
                                </MudTd>
                            }
                        }
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

@code {
    private HttpClient HttpClient => HttpClientFactory.CreateClient("RpgStatsApi");
    private CharacterDetailDto? _character;
    private List<StatValueDto>? _statValues = new();
    private List<GameStatDto>? _gameStats = new();

    [Parameter] public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetCharacter();
        await GetStatValues();
        await GetGameStats();
    }

    private async Task GetStatValues()
    {
        if (_character != null)
        {
            var response = await HttpClient.GetFromJsonAsync<RpgStatsResponse<List<StatValueDto>>>($"api/StatValue/GetStatValuesByCharacter/{_character.Id}");
            _statValues = response?.Data ?? new List<StatValueDto>();
        }
    }

    private async Task GetGameStats()
    {
        var response = await HttpClient.GetAsync(($"api/GameStat/GetGameStatsByGame/{_character?.GameWithoutFkObjectsDto?.Id}"));
        var responseContent = await response.Content.ReadFromJsonAsync<RpgStatsResponse<List<GameStatDto>>>();
        _gameStats = responseContent?.Data?.OrderBy(x => x.SortIndex).ToList() ?? new List<GameStatDto>();
    }

    private async Task GetCharacter()
    {
        var response = await HttpClient.GetFromJsonAsync<RpgStatsResponse<CharacterDetailDto>>($"api/Character/GetCharacterDetailById/{Id}");
        _character = response?.Data;
    }

    private static string TurnByteArrayToImage(byte[] imageBytes)
    {
        return ImageService.ConvertByteArrayToImage(imageBytes);
    }

    private async Task DeleteCharacter()
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Soll der Charakter wirklich gelöscht werden?" },
            { "ButtonText", "Löschen" },
            { "Color", Color.Error }
        };
        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.ExtraSmall
        };
        var dialog = await DialogService.ShowAsync<DeleteDialog>("Löschen", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled == false)
        {
            var response = await HttpClient.DeleteAsync($"api/Character/DeleteCharacter/{Id}");
            var content = await response.Content.ReadFromJsonAsync<RpgStatsResponse<CharacterDto>>();
            if (response.IsSuccessStatusCode && content?.Success == true)
                NavigationManager.NavigateTo("/allCharacters");
            else
            {
                await DialogService.ShowMessageBox("Fehler", "Charakter konnte nicht gelöscht werden.");
            }
        }
    }

    private Dictionary<int, List<StatValueDto>> GetStatValuesByLevel()
    {
        if (_statValues == null) return new Dictionary<int, List<StatValueDto>>();

        return _statValues
            .GroupBy(sv => sv.Level)
            .OrderBy(g => g.Key)
            .ToDictionary(g => g.Key, g => g.ToList());
    }

    private async Task AddNewStatValues()
    {
        var dialogOptions = new DialogOptions { CloseOnEscapeKey = true };
        var dialogParameter = new DialogParameters { { "Character", _character }, { "Stats", GetStats() } };
        var dialog = await DialogService.ShowAsync<StatValuesCreate>("Neue Statuswerte", dialogParameter, dialogOptions);
        var result = await dialog.Result;
        if (result.Canceled == false)
            await GetStatValues();
    }

    private async Task RemoveStatValues()
    {
        var dialogOptions = new DialogOptions { CloseOnEscapeKey = true };
        var dialogParameter = new DialogParameters { { "Character", _character } };
        var dialog = await DialogService.ShowAsync<StatValuesRemove>("Statuswerte entfernen", dialogParameter, dialogOptions);
        var result = await dialog.Result;
        if (result.Canceled == false)
            await GetStatValues();

    }

    private List<StatDto> GetStats()
    {
        if (_gameStats == null) return new List<StatDto>();

        return _gameStats.Select(gs => new StatDto
        {
            Id = gs.StatId,
            Name = gs.CustomStatName,
            ShortName = gs.CustomStatShortName
        }).ToList();
    }
}
