@page "/allStatTypes"
@using RpgStats.BlazorServer.Model
@using RpgStats.Dto
@inject IDialogService DialogService
@inject IHttpClientFactory HttpClientFactory

<MudGrid>
    @if (_stats == null)
    {
        <MudItem xs="12">
            <MudProgressCircular Color="Color.Default" Indeterminate="true" Style="margin-top: 2em"/>
        </MudItem>
    }
    else
    {
        <MudItem xs="12">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.OpenInNew"
                       FullWidth="true" Size="Size.Large" OnClick="@(async () => await ShowNewStatTypeDialog())">Neuer
                Status Typ
            </MudButton>
        </MudItem>

        @foreach (var stat in _stats)
        {
            <MudItem xs="12">
                <MudText Typo="Typo.h4">@stat.ShortName --- @stat.Name
                    <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Primary"
                                   OnClick="@(async () => await ShowUpdateStatTypeDialog(stat.Id))"/>
                </MudText>
            </MudItem>
        }
    }
</MudGrid>

@code {
    private HttpClient HttpClient => HttpClientFactory.CreateClient("RpgStatsApi");
    private List<StatDto>? _stats;
    private StatForCreationDto? _statForCreationDto = new();
    private StatForUpdateDto? _statForUpdateDto = new();

    protected override async Task OnInitializedAsync()
    {
        await GetStats();
    }

    private async Task GetStats()
    {
        var serviceResult = await HttpClient.GetFromJsonAsync<ServiceResult<List<StatDto>>>("api/Stat/GetStats");
        _stats = serviceResult?.Data?.OrderBy(x => x.Name).ToList();
    }

    private async Task ShowNewStatTypeDialog()
    {
        var closeOnEscapeKey = new DialogOptions { CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<StatTypeDialog>("Neuer Status Typ", closeOnEscapeKey);
        var result = await dialog.Result;

        if (result.Canceled == false)
        {
            if (result.Data is StatDto stat)
                _statForCreationDto = new StatForCreationDto
                {
                    Name = stat.Name,
                    ShortName = stat.ShortName
                };
            await CreateNewStatType();
        }
    }

    private async Task CreateNewStatType()
    {
        var response = await HttpClient.PostAsJsonAsync("api/Stat/CreateStat", _statForCreationDto);

        if (response.IsSuccessStatusCode)
        {
            await GetStats();
        }
    }

    private async Task ShowUpdateStatTypeDialog(long id)
    {
        if (_stats != null)
        {
            var stat = _stats.FirstOrDefault(s => s.Id == id);
            if (stat is null)
            {
                return;
            }

            var closeOnEscapeKey = new DialogOptions { CloseOnEscapeKey = true };

            var parameters = new DialogParameters { { "Stat", stat } };

            var dialog = await DialogService.ShowAsync<StatTypeDialog>("Status Typ bearbeiten", parameters, closeOnEscapeKey);
            var result = await dialog.Result;

            if (result.Canceled == false)
            {
                if (result.Data is StatDto updatedStat)
                    _statForUpdateDto = new StatForUpdateDto
                    {
                        Name = updatedStat.Name,
                        ShortName = updatedStat.ShortName
                    };
                await UpdateStatType(id);
            }
        }
    }

    private async Task UpdateStatType(long id)
    {
        if (_statForUpdateDto != null)
        {
            var response = await HttpClient.PutAsJsonAsync($"api/Stat/UpdateStat/{id}", _statForUpdateDto);

            if (response.IsSuccessStatusCode)
            {
                await GetStats();
            }
        }
    }

}
