@using RpgStats.BlazorServer.Model
@using RpgStats.Dto
@inject IHttpClientFactory HttpClientFactory

<MudDialog>
    <DialogContent>
        <MudSelect T="string" Required="true" Label="Status-Typ" MultiSelection="false" @bind-Value="_stat"
                   @bind-SelectedValues="SelectedStat" Clearable="true">
            @if (_stats != null)
            {
                foreach (var statDto in _stats.OrderBy(x => x.ShortName).ToList())
                {
                    <MudSelectItem T="string"
                                   Value="@statDto.ShortName">
                        @statDto.ShortName --- @statDto.Name
                    </MudSelectItem>
                }
            }
        </MudSelect>
        <MudItem xs="6">
            <MudTextField Label="Sortier-Index" @bind-Value="_gameStatDto.SortIndex" Numeric="true"/>
        </MudItem>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Abbrechen</MudButton>
        <MudButton OnClick="Submit" Color="Color.Primary">OK</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }

    [Parameter] public GameDetailDto? Game { get; set; }

    private HttpClient HttpClient => HttpClientFactory.CreateClient("RpgStatsApi");
    private List<StatDto>? _stats = new();
    private string _stat = "Nothing selected.";
    private IEnumerable<string> SelectedStat { get; set; } = new HashSet<string>();
    private readonly GameStatDto _gameStatDto = new();

    protected override async Task OnInitializedAsync()
    {
        var response = await HttpClient.GetFromJsonAsync<RpgStatsResponse<List<StatDto>>>("api/Stat/GetStats");
        _stats = response?.Data;
    }

    private void Cancel()
    {
        MudDialog?.Cancel();
    }

    private void Submit()
    {
        if (Game != null) _gameStatDto.GameId = Game.Id;
        if (_stats != null) _gameStatDto.StatId = _stats.Single(x => x.ShortName == _stat).Id;
        MudDialog?.Close(DialogResult.Ok(_gameStatDto));
    }


}
